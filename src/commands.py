#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è Telegram –±–æ—Ç–∞.
–ó–¥–µ—Å—å –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å.
"""

import logging
import platform
import os
import socket
import subprocess
import asyncio
from typing import Callable, Optional, Dict, Any
from datetime import datetime
import webbrowser
from PIL import ImageGrab
import io
import sys
import time
import pyautogui
import psutil
import re
import signal
import json
import urllib.request
import ctypes

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

from src.config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def register_commands(app: Application, config: Config, message_callback: Optional[Callable[[str], None]] = None):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    
    Args:
        app: Telegram Application
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        message_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞")
    if message_callback:
        message_callback("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    async def start_command_handler(update: Update, context: CallbackContext):
        await start_command(update, context, config, message_callback)

    async def screenshot_command_handler(update: Update, context: CallbackContext):
        await screenshot_command(update, context, config, message_callback)
    
    async def ping_command_handler(update: Update, context: CallbackContext):
        await ping_command(update, context, config, message_callback)
    
    async def help_command_handler(update: Update, context: CallbackContext):
        await help_command(update, context, config, message_callback)
    
    async def cpu_command_handler(update: Update, context: CallbackContext):
        await cpu_command(update, context, config, message_callback)
    
    async def ram_command_handler(update: Update, context: CallbackContext):
        await ram_command(update, context, config, message_callback)
    
    async def ps_command_handler(update: Update, context: CallbackContext):
        await ps_command(update, context, config, message_callback)
    
    async def kill_command_handler(update: Update, context: CallbackContext):
        await kill_command(update, context, config, message_callback)
    
    async def ip_command_handler(update: Update, context: CallbackContext):
        await ip_command(update, context, config, message_callback)
    
    async def lock_command_handler(update: Update, context: CallbackContext):
        await lock_command(update, context, config, message_callback)
    
    async def shutdown_command_handler(update: Update, context: CallbackContext):
        await shutdown_command(update, context, config, message_callback)

    async def message_handler(update: Update, context: CallbackContext):
        await handle_message(update, context, config, message_callback)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start_command_handler))
    app.add_handler(CommandHandler("screenshot", screenshot_command_handler))
    app.add_handler(CommandHandler("ping", ping_command_handler))
    app.add_handler(CommandHandler("help", help_command_handler))
    app.add_handler(CommandHandler("cpu", cpu_command_handler))
    app.add_handler(CommandHandler("ram", ram_command_handler))
    app.add_handler(CommandHandler("ps", ps_command_handler))
    app.add_handler(CommandHandler("kill", kill_command_handler))
    app.add_handler(CommandHandler("ip", ip_command_handler))
    app.add_handler(CommandHandler("lock", lock_command_handler))
    app.add_handler(CommandHandler("shutdown", shutdown_command_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    logger.info("–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    if message_callback:
        message_callback("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
def is_owner(update: Update, config: Config) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞"""
    user_id = str(update.effective_user.id)
    return user_id in config.owner_ids

async def start_command(update: Update, context: CallbackContext, config: Config, 
                      message_callback: Optional[Callable[[str], None]] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        computer_name = socket.gethostname()
        system_info = platform.platform()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ NexusTG.\n\n"
            f"üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ:\n"
            f"‚Ä¢ –ò–º—è: {computer_name}\n"
            f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞: {system_info}\n\n"
            f"üïí –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
            "üîß –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /help"
        )
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        if message_callback:
            message_callback(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –±–æ—Ç—É")
    
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def handle_message(update: Update, context: CallbackContext, config: Config, 
                       message_callback: Optional[Callable[[str], None]] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)"""
    try:
        user = update.effective_user
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            return
        
        text = update.message.text
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        await update.message.reply_text(
            f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: \"{text}\"\n\n"
            f"‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
            
            f"üî∑ –û–°–ù–û–í–ù–´–ï\n"
            f"‚Ä¢ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            f"‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
            
            f"üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì\n"
            f"‚Ä¢ /cpu - –∑–∞–≥—Ä—É–∑–∫–∞ CPU\n"
            f"‚Ä¢ /ram - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM\n"
            f"‚Ä¢ /ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏\n"
            f"‚Ä¢ /ip - IP –∞–¥—Ä–µ—Å–∞\n\n"
            
            f"‚öôÔ∏è –ü–†–û–¶–ï–°–°–´\n"
            f"‚Ä¢ /ps - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º\n"
            f"‚Ä¢ /kill - –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n\n"
            
            f"üîí –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ö\n"
            f"‚Ä¢ /lock - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞\n"
            f"‚Ä¢ /shutdown - –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö\n\n"
            
            f"üõ†Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û\n"
            f"‚Ä¢ /screenshot - —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"
        )
        
        if message_callback:
            message_callback(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (ID: {user.id}): {text}")
    
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        except Exception:
            pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

async def screenshot_command(update: Update, context: CallbackContext, config: Config,
                           message_callback: Optional[Callable[[str], None]] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /screenshot - –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ"""
    try:
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /screenshot –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        processing_message = await update.message.reply_text("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è Windows)
        window_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ"
        if sys.platform == 'win32':
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                command = """
                Add-Type @"
                    using System;
                    using System.Runtime.InteropServices;
                    public class WindowInfo {
                        [DllImport("user32.dll")]
                        public static extern IntPtr GetForegroundWindow();
                        [DllImport("user32.dll")]
                        public static extern int GetWindowText(IntPtr hWnd, System.Text.StringBuilder text, int count);
                        [DllImport("user32.dll")]
                        public static extern int GetWindowThreadProcessId(IntPtr hWnd, out int processId);
                    }
"@
                $hwnd = [WindowInfo]::GetForegroundWindow()
                $process_id = 0
                [WindowInfo]::GetWindowThreadProcessId($hwnd, [ref]$process_id)
                $process = Get-Process -Id $process_id
                $window_title = New-Object System.Text.StringBuilder 256
                [WindowInfo]::GetWindowText($hwnd, $window_title, 256)
                $window_title.ToString() + " (" + $process.ProcessName + ".exe)"
                """
                
                window_info = subprocess.check_output(["powershell", "-Command", command], text=True).strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–∫–Ω–∞
                # –§–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ (–ø—Ä–æ—Ü–µ—Å—Å.exe)" -> "–ø—Ä–æ—Ü–µ—Å—Å.exe"
                if "(" in window_info and ")" in window_info:
                    process_name = window_info.split("(")[-1].replace(")", "")
                    window_info = process_name
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
                window_info = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"
        else:
            window_info = "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Windows"
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        try:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = time.strftime("%Y%m%d-%H%M%S")
            filename = f"screenshot_{timestamp}.png"
            filepath = os.path.join(os.getcwd(), filename)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–æ–º–æ—â—å—é pyautogui
            screenshot = pyautogui.screenshot()
            screenshot.save(filepath)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            log_message = f"–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç: {filename}, –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: {window_info}"
            if message_callback:
                message_callback(log_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(filepath, 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=f"üñ•Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: {window_info}"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            await processing_message.delete()
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                os.remove(filepath)
                if message_callback:
                    message_callback(f"–§–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —É–¥–∞–ª–µ–Ω: {filename}")
            except Exception as e:
                if message_callback:
                    message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
            
        except Exception as e:
            await processing_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
    
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def ping_command(update: Update, context: CallbackContext, config: Config,
                     message_callback: Optional[Callable[[str], None]] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–∫–ª–∏–∫–∞"""
    try:
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /ping –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        start_time = time.time()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        # –ò–∑–º–µ—Ä—è–µ–º –ø–∏–Ω–≥ –¥–æ google.com
        ping_result = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        try:
            if sys.platform == 'win32':
                # Windows
                ping_process = subprocess.run(
                    ['ping', '-n', '3', 'google.com'],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                output = ping_process.stdout
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏–∑ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
                if "Average" in output:
                    avg_time = output.split("Average =")[1].split("ms")[0].strip()
                    ping_result = f"{avg_time} –º—Å"
            else:
                # Linux/Mac
                ping_process = subprocess.run(
                    ['ping', '-c', '3', 'google.com'],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                output = ping_process.stdout
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏–∑ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
                if "avg" in output:
                    avg_line = output.split("min/avg/max")[1]
                    avg_time = avg_line.split("/")[1].strip()
                    ping_result = f"{avg_time} –º—Å"
        except Exception as e:
            ping_result = f"–û—à–∏–±–∫–∞: {str(e)}"
            
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        end_time = time.time()
        execution_time = round((end_time - start_time) * 1000, 2)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await message.edit_text(
            f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
            f"üîπ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {execution_time} –º—Å\n"
            f"üîπ –ü–∏–Ω–≥ –¥–æ google.com: {ping_result}\n"
            f"üîπ –°—Ç–∞—Ç—É—Å NexusTG: –û–Ω–ª–∞–π–Ω"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if message_callback:
            message_callback(f"–ü–∏–Ω–≥ –ø—Ä–æ–≤–µ—Ä–µ–Ω: {ping_result}, –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {execution_time} –º—Å")
            
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏–Ω–≥–∞: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def help_command(update: Update, context: CallbackContext, config: Config,
                     message_callback: Optional[Callable[[str], None]] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º"""
    try:
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /help –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        await update.message.reply_text(
            f"üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º NexusTG\n\n"
            
            f"üî∑ *–û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´*\n"
            f"‚Ä¢ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
            f"‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            
            f"üìä *–ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´*\n"
            f"‚Ä¢ /cpu - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞\n"
            f"‚Ä¢ /ram - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏\n"
            f"‚Ä¢ /ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–∫–ª–∏–∫–∞ —Å–µ—Ç–∏\n"
            f"‚Ä¢ /ip - –ª–æ–∫–∞–ª—å–Ω—ã–π –∏ –≤–Ω–µ—à–Ω–∏–π IP —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π\n\n"
            
            f"‚öôÔ∏è *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–¶–ï–°–°–ê–ú–ò*\n"
            f"‚Ä¢ /ps - —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º\n"
            f"‚Ä¢ /kill <program.exe> - –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n\n"
            
            f"üîí *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ü–¨–Æ–¢–ï–†–û–ú*\n"
            f"‚Ä¢ /lock - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ (Win+L)\n"
            f"‚Ä¢ /shutdown - –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n\n"
            
            f"üõ†Ô∏è *–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò*\n"
            f"‚Ä¢ /screenshot - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞\n\n"
            
            f"üì± –í–µ—Ä—Å–∏—è: 1.0\n"
            f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {time.strftime('%d.%m.%Y')}"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∫–∏
        if message_callback:
            message_callback(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
            
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def cpu_command(update: Update, context: CallbackContext, config: Config,
                    message_callback: Optional[Callable[[str], None]] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cpu - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    try:
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /cpu –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        start_time = time.time()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            cpu_temp = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            if hasattr(psutil, "sensors_temperatures"):
                temps = psutil.sensors_temperatures()
                if temps:
                    for name, entries in temps.items():
                        if entries:
                            cpu_temp = f"{entries[0].current}¬∞C"
                            break
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            cpu_info = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            if platform.system() == "Windows":
                try:
                    cpu_info = subprocess.check_output("wmic cpu get name", shell=True).decode().strip()
                    cpu_info = cpu_info.split("\n")[1]
                except:
                    pass
            elif platform.system() == "Linux":
                try:
                    cpu_info = subprocess.check_output("cat /proc/cpuinfo | grep 'model name' | head -1", shell=True).decode().strip()
                    cpu_info = cpu_info.split(":")[1].strip()
                except:
                    pass
            elif platform.system() == "Darwin":  # macOS
                try:
                    cpu_info = subprocess.check_output("sysctl -n machdep.cpu.brand_string", shell=True).decode().strip()
                except:
                    pass
                    
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä
            cpu_cores = psutil.cpu_count(logical=False)
            cpu_threads = psutil.cpu_count(logical=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —è–¥—Ä—É
            per_cpu = psutil.cpu_percent(percpu=True)
            per_cpu_text = "\n".join([f"‚Ä¢ –Ø–¥—Ä–æ {i+1}: {p}%" for i, p in enumerate(per_cpu)])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö, –ø–æ—Ç—Ä–µ–±–ª—è—é—â–∏—Ö –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ CPU
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent']):
                try:
                    processes.append((proc.info['pid'], proc.info['name'], proc.info['cpu_percent']))
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    pass
            
            top_processes = sorted(processes, key=lambda x: x[2], reverse=True)[:3]
            top_processes_text = "\n".join([f"‚Ä¢ {name} (PID: {pid}): {cpu:.1f}%" for pid, name, cpu in top_processes])
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            end_time = time.time()
            execution_time = round((end_time - start_time) * 1000, 2)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await message.edit_text(
                f"üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ\n\n"
                f"üìä –û–±—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {cpu_percent}%\n"
                f"üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cpu_temp}\n"
                f"üß† –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {cpu_info}\n"
                f"‚öôÔ∏è –Ø–¥–µ—Ä: {cpu_cores}, –ü–æ—Ç–æ–∫–æ–≤: {cpu_threads}\n\n"
                f"üìà –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —è–¥—Ä–∞–º:\n{per_cpu_text}\n\n"
                f"üîù –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU:\n{top_processes_text}\n\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time} –º—Å"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if message_callback:
                message_callback(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CPU –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∑–∞–≥—Ä—É–∑–∫–∞: {cpu_percent}%")
                
        except Exception as e:
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CPU: {str(e)}")
            
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def ram_command(update: Update, context: CallbackContext, config: Config,
                    message_callback: Optional[Callable[[str], None]] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ram - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    try:
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /ram –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        start_time = time.time()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å (RAM)
            virtual_memory = psutil.virtual_memory()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            def get_size(bytes, suffix="B"):
                factor = 1024
                for unit in ["", "K", "M", "G", "T", "P"]:
                    if bytes < factor:
                        return f"{bytes:.2f} {unit}{suffix}"
                    bytes /= factor
                return f"{bytes:.2f} {suffix}"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–æ–¥–∫–∞—á–∫–∏ (swap)
            swap = psutil.swap_memory()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö, –ø–æ—Ç—Ä–µ–±–ª—è—é—â–∏—Ö –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ RAM
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'memory_percent']):
                try:
                    processes.append((proc.info['pid'], proc.info['name'], proc.info['memory_percent']))
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    pass
            
            top_processes = sorted(processes, key=lambda x: x[2], reverse=True)[:3]
            top_processes_text = "\n".join([f"‚Ä¢ {name} (PID: {pid}): {ram:.1f}%" for pid, name, ram in top_processes])
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            end_time = time.time()
            execution_time = round((end_time - start_time) * 1000, 2)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–ª–æ—Å—É –∑–∞–≥—Ä—É–∑–∫–∏
            progress_length = 20
            used_blocks = int(virtual_memory.percent / 100 * progress_length)
            progress_bar = "üü¶" * used_blocks + "‚¨ú" * (progress_length - used_blocks)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await message.edit_text(
                f"üß† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏\n\n"
                f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {virtual_memory.percent}%\n"
                f"{progress_bar}\n\n"
                f"üíæ –í—Å–µ–≥–æ: {get_size(virtual_memory.total)}\n"
                f"üìà –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {get_size(virtual_memory.used)}\n"
                f"üìâ –°–≤–æ–±–æ–¥–Ω–æ: {get_size(virtual_memory.available)}\n\n"
                f"üîÑ –§–∞–π–ª –ø–æ–¥–∫–∞—á–∫–∏ (SWAP):\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {get_size(swap.total)}\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {get_size(swap.used)} ({swap.percent}%)\n\n"
                f"üîù –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ RAM:\n{top_processes_text}\n\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time} –º—Å"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if message_callback:
                message_callback(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RAM –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {virtual_memory.percent}%")
                
        except Exception as e:
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ RAM: {str(e)}")
            
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def ps_command(update: Update, context: CallbackContext, config: Config,
                   message_callback: Optional[Callable[[str], None]] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ps - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"""
    try:
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /ps –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ CPU, RAM –∏ –∏–º–µ–Ω–∏
            start_time = time.time()
            process_list = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent', 'status']):
                try:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã)
                    if proc.info['status'] == 'running' and proc.info['name'].endswith('.exe'):
                        process_list.append({
                            'pid': proc.info['pid'],
                            'name': proc.info['name'],
                            'cpu': proc.info['cpu_percent'],
                            'memory': proc.info['memory_percent']
                        })
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    pass
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏
            process_list = sorted(process_list, key=lambda x: x['memory'], reverse=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            max_programs = min(20, len(process_list))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            process_text = "\n".join([
                f"‚Ä¢ {i+1}. {p['name']} - RAM: {p['memory']:.1f}%, CPU: {p['cpu']:.1f}%, PID: {p['pid']}"
                for i, p in enumerate(process_list[:max_programs])
            ])
            
            # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_time = round((time.time() - start_time) * 1000, 2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å
            if not process_list:
                await message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.")
                return
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º
            total_count = len(process_list)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.edit_text(
                f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º ({total_count} –≤—Å–µ–≥–æ)\n\n"
                f"{process_text}\n\n"
                f"‚ÑπÔ∏è –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                f"/kill program.exe\n\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time} –º—Å"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if message_callback:
                message_callback(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º ({total_count} –≤—Å–µ–≥–æ)")
            
        except Exception as e:
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /ps: {str(e)}")
    
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def kill_command(update: Update, context: CallbackContext, config: Config,
                     message_callback: Optional[Callable[[str], None]] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /kill - –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    try:
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /kill –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç (–∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã)
        args = context.args
        if not args:
            await update.message.reply_text(
                "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.\n\n"
                "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
                "/kill program.exe\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ps"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        program_name = args[0].lower()
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ exe-—Ñ–∞–π–ª
        if not program_name.endswith('.exe'):
            program_name += '.exe'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await update.message.reply_text(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É {program_name}...")
        
        try:
            # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            found = False
            closed_count = 0
            
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    if proc.info['name'].lower() == program_name.lower():
                        # –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å
                        proc.terminate()  # –ë–æ–ª–µ–µ –º—è–≥–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                        found = True
                        closed_count += 1
                        
                        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        try:
                            proc.wait(timeout=3)
                        except psutil.TimeoutExpired:
                            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º
                            proc.kill()
                            
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess) as e:
                    if message_callback:
                        message_callback(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É: {str(e)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if found:
                await message.edit_text(
                    f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ {program_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.\n"
                    f"–ó–∞–∫—Ä—ã—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {closed_count}"
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if message_callback:
                    message_callback(f"–ó–∞–∫—Ä—ã—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ {program_name} ({closed_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)")
            else:
                await message.edit_text(
                    f"‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ {program_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.\n\n"
                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ps"
                )
        
        except Exception as e:
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_name}: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /kill –¥–ª—è {program_name}: {str(e)}")
    
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def ip_command(update: Update, context: CallbackContext, config: Config,
                   message_callback: Optional[Callable[[str], None]] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ip - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞–ª—å–Ω–æ–º –∏ –≤–Ω–µ—à–Ω–µ–º IP —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π"""
    try:
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /ip –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP-–∞–¥—Ä–µ—Å–∞—Ö...")
        
        try:
            # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            start_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å
            local_ip = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            try:
                # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ) –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–µ—Ä—É
                s.connect(("8.8.8.8", 80))
                local_ip = s.getsockname()[0]
                s.close()
            except Exception as e:
                local_ip = f"–û—à–∏–±–∫–∞: {str(e)}"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
            computer_name = socket.gethostname()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å
            external_ip = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            geo_info = {}
            try:
                # –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP
                with urllib.request.urlopen("https://api.ipify.org") as response:
                    external_ip = response.read().decode('utf-8')
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ IP
                with urllib.request.urlopen(f"http://ip-api.com/json/{external_ip}") as response:
                    geo_info = json.loads(response.read().decode('utf-8'))
            except Exception as e:
                external_ip = f"–û—à–∏–±–∫–∞: {str(e)}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
            location_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if geo_info and geo_info.get('status') == 'success':
                country = geo_info.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                city = geo_info.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                region = geo_info.get('regionName', '')
                isp = geo_info.get('isp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                location_info = f"{city}, {region}, {country}\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {isp}"
            
            # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_time = round((time.time() - start_time) * 1000, 2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await message.edit_text(
                f"üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP-–∞–¥—Ä–µ—Å–µ\n\n"
                f"üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä: {computer_name}\n\n"
                f"üè† –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {local_ip}\n\n"
                f"üåç –í–Ω–µ—à–Ω–∏–π IP: {external_ip}\n\n"
                f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n{location_info}\n\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time} –º—Å"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if message_callback:
                message_callback(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP: –ª–æ–∫–∞–ª—å–Ω—ã–π {local_ip}, –≤–Ω–µ—à–Ω–∏–π {external_ip}")
            
        except Exception as e:
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /ip: {str(e)}")
    
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def lock_command(update: Update, context: CallbackContext, config: Config,
                     message_callback: Optional[Callable[[str], None]] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /lock - –±–ª–æ–∫–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω Windows (Win+L)"""
    try:
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /lock –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        message = await update.message.reply_text("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞...")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ Windows
            if sys.platform == 'win32':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ctypes –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ Windows API –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                try:
                    # –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é LockWorkStation –∏–∑ user32.dll
                    ctypes.windll.user32.LockWorkStation()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                    await message.edit_text("‚úÖ –≠–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if message_callback:
                        message_callback(f"–≠–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {user.first_name} (ID: {user.id})")
                except Exception as e:
                    # –ú–µ—Ç–æ–¥ 2 (–∑–∞–ø–∞—Å–Ω–æ–π): –ò—Å–ø–æ–ª—å–∑—É–µ–º rundll32
                    subprocess.call('rundll32.exe user32.dll,LockWorkStation')
                    await message.edit_text("‚úÖ –≠–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–º–µ—Ç–æ–¥ 2)")
                    
                    if message_callback:
                        message_callback(f"–≠–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–º–µ—Ç–æ–¥ 2) –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {user.first_name} (ID: {user.id})")
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
                await message.edit_text("‚ùå –§—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows")
                if message_callback:
                    message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {sys.platform}")
            
        except Exception as e:
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —ç–∫—Ä–∞–Ω–∞: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /lock: {str(e)}")
    
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def shutdown_command(update: Update, context: CallbackContext, config: Config,
                         message_callback: Optional[Callable[[str], None]] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /shutdown - –≤—ã–∫–ª—é—á–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä"""
    try:
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /shutdown –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
        confirm_keyboard = [
            ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        from telegram import ReplyKeyboardMarkup
        
        await update.message.reply_text(
            "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä.\n\n"
            "–í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(confirm_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        async def handle_confirmation(update_inner, context_inner):
            response = update_inner.message.text.lower()
            
            # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            from telegram import ReplyKeyboardRemove
            await update_inner.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞...", reply_markup=ReplyKeyboardRemove())
            
            if "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" in response:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
                shutdown_message = await update_inner.message.reply_text("üîÑ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...")
                
                try:
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º
                    if message_callback:
                        message_callback(f"–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {user.first_name} (ID: {user.id})")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
                    if sys.platform == 'win32':
                        # Windows: –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
                        command = 'shutdown /s /t 10 /c "–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"'
                        subprocess.Popen(command, shell=True)
                        
                        await shutdown_message.edit_text(
                            "‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.\n\n"
                            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ:\n"
                            "`shutdown /a`"
                        )
                    elif sys.platform == 'linux' or sys.platform == 'linux2':
                        # Linux: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
                        command = 'sudo shutdown -h now'
                        subprocess.Popen(command, shell=True)
                        
                        await shutdown_message.edit_text("‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
                    elif sys.platform == 'darwin':
                        # macOS: –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
                        command = 'sudo shutdown -h now'
                        subprocess.Popen(command, shell=True)
                        
                        await shutdown_message.edit_text("‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
                    else:
                        await shutdown_message.edit_text(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {sys.platform}")
                
                except Exception as e:
                    await shutdown_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}")
                    if message_callback:
                        message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /shutdown: {str(e)}")
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
                await update_inner.message.reply_text("üõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                if message_callback:
                    message_callback(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) –æ—Ç–º–µ–Ω–∏–ª –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
            
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context_inner.application.remove_handler(confirmation_handler)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_confirmation)
        context.application.add_handler(confirmation_handler)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
        if message_callback:
            message_callback(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
    
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)
