# –ú–æ–¥—É–ª—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è Telegram –±–æ—Ç–∞.
# –ó–¥–µ—Å—å –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å.


import logging
import platform
import os
import socket
import subprocess
import asyncio
from typing import Callable, Optional, Dict, Any
from datetime import datetime
import webbrowser
from PIL import ImageGrab
import io
import sys
import time
import pyautogui
import psutil
import re
import signal
import json
import urllib.request
import ctypes

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

from src.config import Config

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def register_commands(app: Application, config: Config, message_callback: Optional[Callable[[str], None]] = None):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    
    Args:
        app: Telegram Application
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        message_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞")
    if message_callback:
        message_callback("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞")
    
    async def start_command_handler(update: Update, context: CallbackContext):
        await start_command(update, context, config, message_callback)

    async def screenshot_command_handler(update: Update, context: CallbackContext):
        await screenshot_command(update, context, config, message_callback)
    
    async def ping_command_handler(update: Update, context: CallbackContext):
        await ping_command(update, context, config, message_callback)
    
    async def help_command_handler(update: Update, context: CallbackContext):
        await help_command(update, context, config, message_callback)
    
    async def cpu_command_handler(update: Update, context: CallbackContext):
        await cpu_command(update, context, config, message_callback)
    
    async def ram_command_handler(update: Update, context: CallbackContext):
        await ram_command(update, context, config, message_callback)
    
    async def ps_command_handler(update: Update, context: CallbackContext):
        await ps_command(update, context, config, message_callback)
    
    async def kill_command_handler(update: Update, context: CallbackContext):
        await kill_command(update, context, config, message_callback)
    
    async def ip_command_handler(update: Update, context: CallbackContext):
        await ip_command(update, context, config, message_callback)
    
    async def lock_command_handler(update: Update, context: CallbackContext):
        await lock_command(update, context, config, message_callback)
    
    async def shutdown_command_handler(update: Update, context: CallbackContext):
        await shutdown_command(update, context, config, message_callback)

    async def message_handler(update: Update, context: CallbackContext):
        await handle_message(update, context, config, message_callback)

    app.add_handler(CommandHandler("start", start_command_handler))
    app.add_handler(CommandHandler("screenshot", screenshot_command_handler))
    app.add_handler(CommandHandler("ping", ping_command_handler))
    app.add_handler(CommandHandler("help", help_command_handler))
    app.add_handler(CommandHandler("cpu", cpu_command_handler))
    app.add_handler(CommandHandler("ram", ram_command_handler))
    app.add_handler(CommandHandler("ps", ps_command_handler))
    app.add_handler(CommandHandler("kill", kill_command_handler))
    app.add_handler(CommandHandler("ip", ip_command_handler))
    app.add_handler(CommandHandler("lock", lock_command_handler))
    app.add_handler(CommandHandler("shutdown", shutdown_command_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    logger.info("–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    if message_callback:
        message_callback("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

def is_owner(update: Update, config: Config) -> bool:
    user_id = str(update.effective_user.id)
    return user_id in config.owner_ids

async def start_command(update: Update, context: CallbackContext, config: Config, 
                      message_callback: Optional[Callable[[str], None]] = None):
    try:
        user = update.effective_user
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        computer_name = socket.gethostname()
        system_info = platform.platform()
        
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ NexusTG.\n\n"
            f"üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ:\n"
            f"‚Ä¢ –ò–º—è: {computer_name}\n"
            f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞: {system_info}\n\n"
            f"üïí –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
            "üîß –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /help"
        )
        
        if message_callback:
            message_callback(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –±–æ—Ç—É")
    
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass 
        
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def handle_message(update: Update, context: CallbackContext, config: Config, 
                       message_callback: Optional[Callable[[str], None]] = None):
    try:
        user = update.effective_user
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            return
        
        text = update.message.text
        
        await update.message.reply_text(
            f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: \"{text}\"\n\n"
            f"‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
            
            f"üî∑ –û–°–ù–û–í–ù–´–ï\n"
            f"‚Ä¢ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            f"‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
            
            f"üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì\n"
            f"‚Ä¢ /cpu - –∑–∞–≥—Ä—É–∑–∫–∞ CPU\n"
            f"‚Ä¢ /ram - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM\n"
            f"‚Ä¢ /ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏\n"
            f"‚Ä¢ /ip - IP –∞–¥—Ä–µ—Å–∞\n\n"
            
            f"‚öôÔ∏è –ü–†–û–¶–ï–°–°–´\n"
            f"‚Ä¢ /ps - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º\n"
            f"‚Ä¢ /kill - –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n\n"
            
            f"üîí –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ö\n"
            f"‚Ä¢ /lock - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞\n"
            f"‚Ä¢ /shutdown - –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö\n\n"
            
            f"üõ†Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û\n"
            f"‚Ä¢ /screenshot - —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"
        )
        
        if message_callback:
            message_callback(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (ID: {user.id}): {text}")
    
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)
        
        try:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        except Exception:
            pass 

async def screenshot_command(update: Update, context: CallbackContext, config: Config,
                           message_callback: Optional[Callable[[str], None]] = None):
    try:
        user = update.effective_user
        
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /screenshot –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        processing_message = await update.message.reply_text("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
        
        window_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ"
        if sys.platform == 'win32':
            try:
                command = """
                Add-Type @"
                    using System;
                    using System.Runtime.InteropServices;
                    public class WindowInfo {
                        [DllImport("user32.dll")]
                        public static extern IntPtr GetForegroundWindow();
                        [DllImport("user32.dll")]
                        public static extern int GetWindowText(IntPtr hWnd, System.Text.StringBuilder text, int count);
                        [DllImport("user32.dll")]
                        public static extern int GetWindowThreadProcessId(IntPtr hWnd, out int processId);
                    }
"@
                $hwnd = [WindowInfo]::GetForegroundWindow()
                $process_id = 0
                [WindowInfo]::GetWindowThreadProcessId($hwnd, [ref]$process_id)
                $process = Get-Process -Id $process_id
                $window_title = New-Object System.Text.StringBuilder 256
                [WindowInfo]::GetWindowText($hwnd, $window_title, 256)
                $window_title.ToString() + " (" + $process.ProcessName + ".exe)"
                """
                
                window_info = subprocess.check_output(["powershell", "-Command", command], text=True).strip()
                
                if "(" in window_info and ")" in window_info:
                    process_name = window_info.split("(")[-1].replace(")", "")
                    window_info = process_name
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
                window_info = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"
        else:
            window_info = "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Windows"
        
        try:
            timestamp = time.strftime("%Y%m%d-%H%M%S")
            filename = f"screenshot_{timestamp}.png"
            filepath = os.path.join(os.getcwd(), filename)
            
            screenshot = pyautogui.screenshot()
            screenshot.save(filepath)
            
            log_message = f"–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç: {filename}, –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: {window_info}"
            if message_callback:
                message_callback(log_message)
            
            with open(filepath, 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=f"üñ•Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: {window_info}"
                )
            
            await processing_message.delete()
            
            try:
                os.remove(filepath)
                if message_callback:
                    message_callback(f"–§–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —É–¥–∞–ª–µ–Ω: {filename}")
            except Exception as e:
                if message_callback:
                    message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
            
        except Exception as e:
            await processing_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
    
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass  
        
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def ping_command(update: Update, context: CallbackContext, config: Config,
                     message_callback: Optional[Callable[[str], None]] = None):
    try:
        user = update.effective_user
        
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /ping –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        start_time = time.time()
        
        message = await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        ping_result = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        try:
            if sys.platform == 'win32':
                ping_process = subprocess.run(
                    ['ping', '-n', '3', 'github.com'],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                output = ping_process.stdout
                
                if "Average" in output:
                    avg_time = output.split("Average =")[1].split("ms")[0].strip()
                    ping_result = f"{avg_time} –º—Å"
            else:
                ping_process = subprocess.run(
                    ['ping', '-c', '3', 'google.com'],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                output = ping_process.stdout
                
                if "avg" in output:
                    avg_line = output.split("min/avg/max")[1]
                    avg_time = avg_line.split("/")[1].strip()
                    ping_result = f"{avg_time} –º—Å"
        except Exception as e:
            ping_result = f"–û—à–∏–±–∫–∞: {str(e)}"
            
        end_time = time.time()
        execution_time = round((end_time - start_time) * 1000, 2)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        await message.edit_text(
            f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
            f"üîπ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {execution_time} –º—Å\n"
            f"üîπ –ü–∏–Ω–≥ –¥–æ google.com: {ping_result}\n"
            f"üîπ –°—Ç–∞—Ç—É—Å NexusTG: –û–Ω–ª–∞–π–Ω"
        )
        
        if message_callback:
            message_callback(f"–ü–∏–Ω–≥ –ø—Ä–æ–≤–µ—Ä–µ–Ω: {ping_result}, –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {execution_time} –º—Å")
            
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏–Ω–≥–∞: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def help_command(update: Update, context: CallbackContext, config: Config,
                     message_callback: Optional[Callable[[str], None]] = None):
    try:
        user = update.effective_user
        
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /help –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        await update.message.reply_text(
            f"üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º NexusTG\n\n"
            
            f"üî∑ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´\n"
            f"‚Ä¢ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
            f"‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            
            f"üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´\n"
            f"‚Ä¢ /cpu - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞\n"
            f"‚Ä¢ /ram - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏\n"
            f"‚Ä¢ /ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–∫–ª–∏–∫–∞ —Å–µ—Ç–∏\n"
            f"‚Ä¢ /ip - –ª–æ–∫–∞–ª—å–Ω—ã–π –∏ –≤–Ω–µ—à–Ω–∏–π IP —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π\n\n"
            
            f"‚öôÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–¶–ï–°–°–ê–ú–ò\n"
            f"‚Ä¢ /ps - —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º\n"
            f"‚Ä¢ /kill <program.exe> - –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n\n"
            
            f"üîí –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ü–¨–Æ–¢–ï–†–û–ú\n"
            f"‚Ä¢ /lock - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ (Win+L)\n"
            f"‚Ä¢ /shutdown - –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n\n"
            
            f"üõ†Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò\n"
            f"‚Ä¢ /screenshot - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞\n\n"
            
            f"üì± –í–µ—Ä—Å–∏—è: 1.0\n"
            f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {time.strftime('%d.%m.%Y')}"
        )
        
        if message_callback:
            message_callback(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
            
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def cpu_command(update: Update, context: CallbackContext, config: Config,
                    message_callback: Optional[Callable[[str], None]] = None):
    try:
        user = update.effective_user
        
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /cpu –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        start_time = time.time()
        
        message = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ...")
        
        try:
            cpu_percent = psutil.cpu_percent(interval=1)
            
            cpu_temp = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            if hasattr(psutil, "sensors_temperatures"):
                temps = psutil.sensors_temperatures()
                if temps:
                    for name, entries in temps.items():
                        if entries:
                            cpu_temp = f"{entries[0].current}¬∞C"
                            break
            
            cpu_info = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            if platform.system() == "Windows":
                try:
                    cpu_info = subprocess.check_output("wmic cpu get name", shell=True).decode().strip()
                    cpu_info = cpu_info.split("\n")[1]
                except:
                    pass
            elif platform.system() == "Linux":
                try:
                    cpu_info = subprocess.check_output("cat /proc/cpuinfo | grep 'model name' | head -1", shell=True).decode().strip()
                    cpu_info = cpu_info.split(":")[1].strip()
                except:
                    pass
            elif platform.system() == "Darwin": 
                try:
                    cpu_info = subprocess.check_output("sysctl -n machdep.cpu.brand_string", shell=True).decode().strip()
                except:
                    pass
                    
            cpu_cores = psutil.cpu_count(logical=False)
            cpu_threads = psutil.cpu_count(logical=True)
            
            per_cpu = psutil.cpu_percent(percpu=True)
            per_cpu_text = "\n".join([f"‚Ä¢ –Ø–¥—Ä–æ {i+1}: {p}%" for i, p in enumerate(per_cpu)])
            
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent']):
                try:
                    processes.append((proc.info['pid'], proc.info['name'], proc.info['cpu_percent']))
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    pass
            
            top_processes = sorted(processes, key=lambda x: x[2], reverse=True)[:3]
            top_processes_text = "\n".join([f"‚Ä¢ {name} (PID: {pid}): {cpu:.1f}%" for pid, name, cpu in top_processes])
            
            end_time = time.time()
            execution_time = round((end_time - start_time) * 1000, 2) 
            
            await message.edit_text(
                f"üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ\n\n"
                f"üìä –û–±—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {cpu_percent}%\n"
                f"üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cpu_temp}\n"
                f"üß† –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {cpu_info}\n"
                f"‚öôÔ∏è –Ø–¥–µ—Ä: {cpu_cores}, –ü–æ—Ç–æ–∫–æ–≤: {cpu_threads}\n\n"
                f"üìà –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —è–¥—Ä–∞–º:\n{per_cpu_text}\n\n"
                f"üîù –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU:\n{top_processes_text}\n\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time} –º—Å"
            )
            
            if message_callback:
                message_callback(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CPU –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∑–∞–≥—Ä—É–∑–∫–∞: {cpu_percent}%")
                
        except Exception as e:
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CPU: {str(e)}")
            
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def ram_command(update: Update, context: CallbackContext, config: Config,
                    message_callback: Optional[Callable[[str], None]] = None):
    try:
        user = update.effective_user
        
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /ram –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        start_time = time.time()
        
        message = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏...")
        
        try:
            virtual_memory = psutil.virtual_memory()
            
            def get_size(bytes, suffix="B"):
                factor = 1024
                for unit in ["", "K", "M", "G", "T", "P"]:
                    if bytes < factor:
                        return f"{bytes:.2f} {unit}{suffix}"
                    bytes /= factor
                return f"{bytes:.2f} {suffix}"
            
            swap = psutil.swap_memory()
            
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'memory_percent']):
                try:
                    processes.append((proc.info['pid'], proc.info['name'], proc.info['memory_percent']))
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    pass
            
            top_processes = sorted(processes, key=lambda x: x[2], reverse=True)[:3]
            top_processes_text = "\n".join([f"‚Ä¢ {name} (PID: {pid}): {ram:.1f}%" for pid, name, ram in top_processes])
            
            end_time = time.time()
            execution_time = round((end_time - start_time) * 1000, 2)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            progress_length = 20
            used_blocks = int(virtual_memory.percent / 100 * progress_length)
            progress_bar = "üü¶" * used_blocks + "‚¨ú" * (progress_length - used_blocks)
            
            await message.edit_text(
                f"üß† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏\n\n"
                f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {virtual_memory.percent}%\n"
                f"{progress_bar}\n\n"
                f"üíæ –í—Å–µ–≥–æ: {get_size(virtual_memory.total)}\n"
                f"üìà –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {get_size(virtual_memory.used)}\n"
                f"üìâ –°–≤–æ–±–æ–¥–Ω–æ: {get_size(virtual_memory.available)}\n\n"
                f"üîÑ –§–∞–π–ª –ø–æ–¥–∫–∞—á–∫–∏ (SWAP):\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {get_size(swap.total)}\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {get_size(swap.used)} ({swap.percent}%)\n\n"
                f"üîù –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ RAM:\n{top_processes_text}\n\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time} –º—Å"
            )
            
            if message_callback:
                message_callback(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RAM –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {virtual_memory.percent}%")
                
        except Exception as e:
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ RAM: {str(e)}")
            
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def ps_command(update: Update, context: CallbackContext, config: Config,
                   message_callback: Optional[Callable[[str], None]] = None):
    try:
        user = update.effective_user
        
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /ps –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        message = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º...")
        
        try:
            start_time = time.time()
            process_list = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent', 'status']):
                try:
                    if proc.info['status'] == 'running' and proc.info['name'].endswith('.exe'):
                        process_list.append({
                            'pid': proc.info['pid'],
                            'name': proc.info['name'],
                            'cpu': proc.info['cpu_percent'],
                            'memory': proc.info['memory_percent']
                        })
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    pass
            
            process_list = sorted(process_list, key=lambda x: x['memory'], reverse=True)
            
            max_programs = min(20, len(process_list))
            
            process_text = "\n".join([
                f"‚Ä¢ {i+1}. {p['name']} - RAM: {p['memory']:.1f}%, CPU: {p['cpu']:.1f}%, PID: {p['pid']}"
                for i, p in enumerate(process_list[:max_programs])
            ])
            
            execution_time = round((time.time() - start_time) * 1000, 2)
            
            if not process_list:
                await message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.")
                return
            
            total_count = len(process_list)
            
            await message.edit_text(
                f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º ({total_count} –≤—Å–µ–≥–æ)\n\n"
                f"{process_text}\n\n"
                f"‚ÑπÔ∏è –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                f"/kill program.exe\n\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time} –º—Å"
            )
            
            if message_callback:
                message_callback(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º ({total_count} –≤—Å–µ–≥–æ)")
            
        except Exception as e:
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /ps: {str(e)}")
    
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def kill_command(update: Update, context: CallbackContext, config: Config,
                     message_callback: Optional[Callable[[str], None]] = None):
    try:
        user = update.effective_user
        
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /kill –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        args = context.args
        if not args:
            await update.message.reply_text(
                "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.\n\n"
                "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
                "/kill program.exe\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ps"
            )
            return
        
        program_name = args[0].lower()
        
        if not program_name.endswith('.exe'):
            program_name += '.exe'
        
        message = await update.message.reply_text(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É {program_name}...")
        
        try:
            found = False
            closed_count = 0
            
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    if proc.info['name'].lower() == program_name.lower():
                        proc.terminate()  
                        found = True
                        closed_count += 1
                        
                        try:
                            proc.wait(timeout=3)
                        except psutil.TimeoutExpired:
                            proc.kill()
                            
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess) as e:
                    if message_callback:
                        message_callback(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É: {str(e)}")
            
            if found:
                await message.edit_text(
                    f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ {program_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.\n"
                    f"–ó–∞–∫—Ä—ã—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {closed_count}"
                )
                
                if message_callback:
                    message_callback(f"–ó–∞–∫—Ä—ã—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ {program_name} ({closed_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)")
            else:
                await message.edit_text(
                    f"‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ {program_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.\n\n"
                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ps"
                )
        
        except Exception as e:
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_name}: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /kill –¥–ª—è {program_name}: {str(e)}")
    
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def ip_command(update: Update, context: CallbackContext, config: Config,
                   message_callback: Optional[Callable[[str], None]] = None):
    try:
        user = update.effective_user
        
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /ip –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        message = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP-–∞–¥—Ä–µ—Å–∞—Ö...")
        
        try:
            start_time = time.time()
            
            local_ip = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                s.connect(("8.8.8.8", 80))
                local_ip = s.getsockname()[0]
                s.close()
            except Exception as e:
                local_ip = f"–û—à–∏–±–∫–∞: {str(e)}"
            
            computer_name = socket.gethostname()
            
            external_ip = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            geo_info = {}
            try:
                with urllib.request.urlopen("https://api.ipify.org") as response:
                    external_ip = response.read().decode('utf-8')
                
                with urllib.request.urlopen(f"http://ip-api.com/json/{external_ip}") as response:
                    geo_info = json.loads(response.read().decode('utf-8'))
            except Exception as e:
                external_ip = f"–û—à–∏–±–∫–∞: {str(e)}"
            
            location_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if geo_info and geo_info.get('status') == 'success':
                country = geo_info.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                city = geo_info.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                region = geo_info.get('regionName', '')
                isp = geo_info.get('isp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                location_info = f"{city}, {region}, {country}\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {isp}"
            
            execution_time = round((time.time() - start_time) * 1000, 2)
            
            await message.edit_text(
                f"üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP-–∞–¥—Ä–µ—Å–µ\n\n"
                f"üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä: {computer_name}\n\n"
                f"üè† –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {local_ip}\n\n"
                f"üåç –í–Ω–µ—à–Ω–∏–π IP: {external_ip}\n\n"
                f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n{location_info}\n\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time} –º—Å"
            )
            
            if message_callback:
                message_callback(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP: –ª–æ–∫–∞–ª—å–Ω—ã–π {local_ip}, –≤–Ω–µ—à–Ω–∏–π {external_ip}")
            
        except Exception as e:
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /ip: {str(e)}")
    
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def lock_command(update: Update, context: CallbackContext, config: Config,
                     message_callback: Optional[Callable[[str], None]] = None):
    try:
        user = update.effective_user
        
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /lock –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        message = await update.message.reply_text("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞...")
        
        try:
            if sys.platform == 'win32':
                try:
                    ctypes.windll.user32.LockWorkStation()
                    
                    await message.edit_text("‚úÖ –≠–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    
                    if message_callback:
                        message_callback(f"–≠–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {user.first_name} (ID: {user.id})")
                except Exception as e:
                    subprocess.call('rundll32.exe user32.dll,LockWorkStation')
                    await message.edit_text("‚úÖ –≠–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–º–µ—Ç–æ–¥ 2)")
                    
                    if message_callback:
                        message_callback(f"–≠–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–º–µ—Ç–æ–¥ 2) –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {user.first_name} (ID: {user.id})")
            else:
                await message.edit_text("‚ùå –§—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows")
                if message_callback:
                    message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {sys.platform}")
            
        except Exception as e:
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —ç–∫—Ä–∞–Ω–∞: {str(e)}")
            if message_callback:
                message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /lock: {str(e)}")
    
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)

async def shutdown_command(update: Update, context: CallbackContext, config: Config,
                         message_callback: Optional[Callable[[str], None]] = None):
    try:
        user = update.effective_user
        
        if not is_owner(update, config):
            await update.message.reply_text(
                f"‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                f"–í–∞—à ID: {user.id} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
            if message_callback:
                message_callback(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /shutdown –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            return
        
        confirm_keyboard = [
            ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        from telegram import ReplyKeyboardMarkup
        
        await update.message.reply_text(
            "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä.\n\n"
            "–í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(confirm_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        
        async def handle_confirmation(update_inner, context_inner):
            response = update_inner.message.text.lower()
            from telegram import ReplyKeyboardRemove
            await update_inner.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞...", reply_markup=ReplyKeyboardRemove())
            
            if "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" in response:
                shutdown_message = await update_inner.message.reply_text("üîÑ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...")
                
                try:
                    if message_callback:
                        message_callback(f"–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {user.first_name} (ID: {user.id})")
                    
                    if sys.platform == 'win32':
                        command = 'shutdown /s /t 10 /c "–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"'
                        subprocess.Popen(command, shell=True)
                        
                        await shutdown_message.edit_text(
                            "‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.\n\n"
                            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ:\n"
                            "`shutdown /a`"
                        )
                    elif sys.platform == 'linux' or sys.platform == 'linux2':
                        command = 'sudo shutdown -h now'
                        subprocess.Popen(command, shell=True)
                        
                        await shutdown_message.edit_text("‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
                    elif sys.platform == 'darwin':
                        command = 'sudo shutdown -h now'
                        subprocess.Popen(command, shell=True)
                        
                        await shutdown_message.edit_text("‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
                    else:
                        await shutdown_message.edit_text(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {sys.platform}")
                
                except Exception as e:
                    await shutdown_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}")
                    if message_callback:
                        message_callback(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /shutdown: {str(e)}")
            else:
                await update_inner.message.reply_text("üõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                if message_callback:
                    message_callback(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) –æ—Ç–º–µ–Ω–∏–ª –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
            
            context_inner.application.remove_handler(confirmation_handler)
        
        confirmation_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_confirmation)
        context.application.add_handler(confirmation_handler)
        
        if message_callback:
            message_callback(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
    
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        try:
            await update.message.reply_text(f"‚ùå {error_message}")
        except Exception:
            pass
        
        logger.error(error_message)
        if message_callback:
            message_callback(error_message)
